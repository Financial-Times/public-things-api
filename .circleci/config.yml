version: 2
workflows:
  version: 2
  build-docker-image:
    jobs:
      - build
      - dockerfile:
          requires:
            - build
jobs:
  build:
    working_directory: /go/src/github.com/Financial-Times/public-things-api
    docker:
      - image: golang:1.10
        environment:
          GOPATH: /go
          CIRCLE_TEST_REPORTS: /tmp/test-results
          CIRCLE_COVERAGE_REPORT: /tmp/coverage-results
          NEO4J_TEST_URL: "http://localhost:7474/db/data/"
      - image: neo4j:3.2.7-enterprise
        environment:
          NEO4J_AUTH: none
          NEO4J_HEAP_MEMORY: 256
          NEO4J_CACHE_MEMORY: 256M
    steps:
      - checkout
      - run:
          name: External Dependencies
          command: |
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            go get -u github.com/mattn/goveralls
            go get -u github.com/jstemmer/go-junit-report
            go get -u github.com/tsenart/vegeta
      - run:
          name: Install jq
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-1.5.tar.gz
            tar -xzf jq-1.5.tar.gz
            cd jq-1.5
            ./configure
            make
            make install
      - run:
          name: Install vegeta
          command: |
            cd /go/src/github.com/tsenart/vegeta
            go install
            cd /go/bin
      - run:
          name: Run load test
          command: vegeta attack -workers 2 -duration=3s -targets=./things.req > results.bin
      - run:
          name: Get hist
          command: cat results.bin | vegeta report -reporter='hist[0,50ms,100ms,250ms,500ms,1s,2s,5s]'
      - run:
          name: View results
          command: vegeta report -inputs=results.bin -reporter=json | jq .
      - run:
          name: View send to Slack
          command: |
            RESULT=`vegeta report -inputs=results.bin -reporter=text`
            curl "https://hooks.slack.com/services/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" \
              -X "POST" \
              -H "content-type: application/json" \
              -d "{\"text\":\"\`\`\`${RESULT}\`\`\`\"}"

      # - run:
      #     name: Test Results
      #     command: |
      #       mkdir -p ${CIRCLE_TEST_REPORTS}
      #       mkdir -p ${CIRCLE_COVERAGE_REPORT}
      # - run:
      #     name: Importing libraries
      #     command: dep ensure -v -vendor-only
      # - run: |
      #       wget --retry-connrefused --no-check-certificate -T 60 $NEO4J_TEST_URL; curl $NEO4J_TEST_URL
      # - run:
      #     name: Go Build
      #     command: go build -v
      # - run:
      #     name: Run Tests
      #     command: |
      #       go test -race -v ./... | /go/bin/go-junit-report > ${CIRCLE_TEST_REPORTS}/main.xml
      #       go test -race -cover -coverprofile=$CIRCLE_COVERAGE_REPORT/coverage.out ./...
      # - run:
      #     name: Upload Coverage
      #     command: /go/bin/goveralls -coverprofile=${CIRCLE_COVERAGE_REPORT}/coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
      # - store_test_results:
      #     path: /tmp/test-results
  dockerfile:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_docker_engine
      - run:
          name: Build Dockerfile
          command: docker build .
